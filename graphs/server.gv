digraph {
    style = dashed
    splines=ortho
    nodesep=0.3
    node [shape=box]
    start [shape=oval]
    edge [penwidth=2]
    end [shape=oval]

    start -> "Receive Read Request"
    subgraph cluster_0 {
        label = "Read Request" labelloc="b" labeljust="r"
        timeout_1[shape=diamond label="Timeout"]
        LocalData [shape=diamond]

        "Receive Read Request" -> LocalData -> ReadFromHDD [color=forestgreen]

        subgraph cluster {
            label = "SendAnswer" labelloc="b" labeljust="l"
            color = darkviolet

            ReadFromHDD -> CreatePacket -> TransmitPacket
        }

        LocalData -> SendRequest [color=brown1]
        SendRequest -> timeout_1
    }
    TransmitPacket -> end
    timeout_1 -> RestructureData [color=forestgreen]
    timeout_1 -> end [color=brown1]

    start -> ReceiveWriteRequest
    subgraph cluster {
        label = "Write Request" labelloc="b"
        timeout_2[label="Timeout" shape=diamond]
        barrier[shape=circle label="barrier"]
        waitJUMBO [shape=circle]
        accessSmallDisks[label="AccessSmallDisks"]
        FUSE_Overhead_2 [label=FUSE_Overhead]
        WriteDataToDisk -> TransactionalTraffic [arrowhead=open style=dashed]

        ReceiveWriteRequest ->  WriteDataToDisk -> FUSE_Overhead -> AccessCapableDisks -> barrier
        ReceiveWriteRequest -> WriteMetaToDHT -> FUSE_Overhead_2 -> accessSmallDisks ->barrier
        ReceiveWriteRequest -> waitJUMBO -> NetworkTransfer
        subgraph cluster_propagation {
            FUSE [label="FUSE_Overhead"]
            send_ack[label="SendAck"]
            NetworkTransfer -> FUSE -> 
            AccessSmallDisks -> send_ack
        }
        send_ack -> barrier
        barrier -> SendAck

        #subgraph for TransactionalTraffic
        subgraph cluster_1 {
            endTrans [label="end"]
            TransTimeout[label="Timeout" shape=diamond]
            TransactionalTraffic -> SelectTarget -> PingTarget -> TransTimeout
            TransTimeout -> SendData [color=red]
            TransTimeout -> SelectTarget [color=green]
            TransactionalTraffic -> GenerateParity -> SendData ->  endTrans
        }
        endTrans -> timeout_2 [color="black:invis:black:invis:black"
            edgetooltip="Calls to multiple nodes"]
    }
    timeout_2 -> end [color=brown1]
    timeout_2 -> RestructureData [color=forestgreen]
    RestructureData -> end
    SendAck -> end

}

